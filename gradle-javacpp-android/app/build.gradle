plugins {
    id 'com.android.application'
    id 'org.bytedeco.gradle-javacpp-build' version '1.5.10'
}

android {
    namespace "com.example.myapplication"
    compileSdk 34
    buildToolsVersion = "34.0.0"

    defaultConfig {
        applicationId "com.example.myapplication"
        minSdkVersion 19
        targetSdkVersion 34
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        externalNativeBuild {
            cmake {
                cppFlags ""
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    externalNativeBuild {
        cmake {
            path "src/main/cpp/CMakeLists.txt"
            version "3.22.1"
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
}

// For library variant, please use android.libraryVariants.
// (see in plugins if you are using com.android.application or com.android.library)
android.applicationVariants.configureEach { variant ->
    def variantName = variant.name.capitalize() // either "Debug" or "Release"
    def javaCompile = project.tasks.named("compile${variantName}JavaWithJavac").get()
    def generateJson = project.tasks.named("generateJsonModel$variantName").get()

    // Compiles NativeLibraryConfig.java
    tasks.register("javacppCompileJava$variantName", JavaCompile) {
        include 'com/example/myapplication/NativeLibraryConfig.java'
        source = javaCompile.source
        classpath = javaCompile.classpath
        destinationDirectory.set(javaCompile.destinationDirectory)
    }

    // Parses NativeLibrary.h and outputs NativeLibrary.java
    tasks.register("javacppBuildParser$variantName", org.bytedeco.gradle.javacpp.BuildTask) {
        dependsOn "javacppCompileJava$variantName"
        classPath = [file(javaCompile.destinationDirectory)]
        includePath =  ["$projectDir/src/main/cpp/"]
        classOrPackageNames = ['com.example.myapplication.NativeLibraryConfig']
        outputDirectory = file("$projectDir/src/main/java/")
    }

    // Compiles NativeLibrary.java and everything else
    javaCompile.dependsOn "javacppBuildParser$variantName"

    // Generates jnijavacpp.cpp and jniNativeLibrary.cpp
    tasks.register("javacppBuildCompiler$variantName", org.bytedeco.gradle.javacpp.BuildTask) {
        dependsOn javaCompile
        classPath = [file(javaCompile.destinationDirectory)]
        classOrPackageNames = ['com.example.myapplication.NativeLibrary']
        compile = false
        deleteJniFiles = false
        outputDirectory = file("$projectDir/src/main/cpp/")
    }

    // Picks up the C++ files listed in CMakeLists.txt
    generateJson.dependsOn "javacppBuildCompiler$variantName"
}

dependencies {
    implementation 'org.bytedeco:javacpp:1.5.10'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.11.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
}